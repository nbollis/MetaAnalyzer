using Analyzer.Util.TypeConverters;
using CsvHelper.Configuration.Attributes;

namespace Analyzer.FileTypes.External;

/// <summary>
/// Represents a Peptide generated by Chimerys (v4.3.0) when ran on the Msaid platform (v1.5.6)
/// </summary>
public class ChimerysPeptide
{
    public bool PassesConfidenceFilter => QValue <= 0.01;

    public ChimerysPeptide() 
    {
        FileSpecificInformation = [];
    }

    #region Wide File Members
    public int CountOfFilesIdentifiedIn => FileSpecificInformation.Count;
    internal List<ChimerysFileSpecificPeptideInfo> FileSpecificInformation { get; init; }

    /// <summary>
    /// Creates a ChimerysPeptide object from a ChimerysPeptide and a ChimerysFileSpecificPeptideInfo object.
    /// Used for translation from wide format to long format
    /// </summary>
    /// <param name="peptide">the wide format peptide</param>
    /// <param name="fileSpecificInfo">the file specific id information</param>
    private ChimerysPeptide(ChimerysPeptide peptide, ChimerysFileSpecificPeptideInfo fileSpecificInfo)
    {
        PeptideId = peptide.PeptideId;
        BaseSequence = peptide.BaseSequence;
        Length = peptide.Length;
        IsAmbiguous = peptide.IsAmbiguous;
        GlobalQValue = peptide.GlobalQValue;
        GlobalSearchEngineScore = peptide.GlobalSearchEngineScore;
        GlobalPep = peptide.GlobalPep;
        IsDecoy = peptide.IsDecoy;
        PositionInProteinIds = peptide.PositionInProteinIds;
        ProteinIds = peptide.ProteinIds;

        RawFileName = fileSpecificInfo.RawFileName;
        SampleName = fileSpecificInfo.SampleName;
        QValue = fileSpecificInfo.QValue;
        SearchEngineScore = fileSpecificInfo.SearchEngineScore;
        Pep = fileSpecificInfo.Pep;
        IsIdentifiedByMbr = fileSpecificInfo.IsIdentifiedByMbr;
        PsmIds = fileSpecificInfo.PsmIds;
        PrecursorIds = fileSpecificInfo.PrecursorIds;
        ModifiedPeptideIds = fileSpecificInfo.ModifiedPeptideIds;
        CountPsms = fileSpecificInfo.CountPsms;
        CountPrecursors = fileSpecificInfo.CountPrecursors;
        CountModifiedPeptides = fileSpecificInfo.CountModifiedPeptides;
        Quantification = fileSpecificInfo.Quantification;
        FileSpecificInformation = [fileSpecificInfo];
    }

    private List<ChimerysPeptide>? _cachedLongFormatPeptides;
    public IEnumerable<ChimerysPeptide> ToLongFormat(bool cache = false)
    {
        if (_cachedLongFormatPeptides != null)
        {
            foreach (var peptide in _cachedLongFormatPeptides)
                yield return peptide;
            yield break;
        }

        var longFormatPeptides = new List<ChimerysPeptide>();

        // Identified in one file only
        if (CountOfFilesIdentifiedIn == 1)
            longFormatPeptides.Add(this);
        // Identified in more than one file
        else
            foreach (var file in FileSpecificInformation)
                longFormatPeptides.Add(new ChimerysPeptide(this, file));

        if (cache)
            _cachedLongFormatPeptides = longFormatPeptides;

        foreach (var peptide in longFormatPeptides)
            yield return peptide;
    }

    #endregion

    #region In both Wide and Long Formats

    [Name("PEPTIDE_ID")]
    public long PeptideId { get; set; }

    [Name("SEQUENCE")]
    public string BaseSequence { get; set; }

    [Name("LENGTH")]
    public int Length { get; set; }

    [Name("IS_AMBIGUOUS")]
    public bool IsAmbiguous { get; set; }

    [Name("GLOBAL_Q_VALUE")]
    public double GlobalQValue { get; set; }

    [Name("GLOBAL_SE_SCORE")]
    public double GlobalSearchEngineScore { get; set; }

    [Name("GLOBAL_PEP")]
    public double GlobalPep { get; set; }

    [Name("DECOY")]
    public bool IsDecoy { get; set; }

    [Name("POSITION_IN_PROTEIN_IDS")]
    [TypeConverter(typeof(SemicolonDelimitedToLongArrayConverter))]
    public long[] PositionInProteinIds { get; set; }

    [Name("PROTEIN_IDS")]
    [TypeConverter(typeof(SemicolonDelimitedToLongArrayConverter))]
    public long[] ProteinIds { get; set; }

    #endregion

    #region Separated into different columns in Wide Format

    // In the case of a wide file, the best result by Q value will be used to populate these properties and the individual file peptides can be generated by ToLongFormat()

    [Name("RAW_FILE_NAME")]
    [Optional]
    public string RawFileName { get; set; }

    [Name("SAMPLE_NAME")]
    [Optional]
    public string SampleName { get; set; }

    [Name("Q_VALUE")]
    [Optional]
    public double QValue { get; set; }

    [Name("SE_SCORE")]
    [Optional]
    public double SearchEngineScore { get; set; }

    [Name("PEP")]
    [Optional]
    public double Pep { get; set; }

    [Name("IS_IDENTIFIED_BY_MBR")]
    [Optional]
    public bool IsIdentifiedByMbr { get; set; }

    [Name("PSM_IDS")]
    [Optional]
    [TypeConverter(typeof(SemicolonDelimitedToLongArrayConverter))]
    public long[] PsmIds { get; set; }

    [Name("PRECURSOR_IDS")]
    [Optional]
    [TypeConverter(typeof(SemicolonDelimitedToLongArrayConverter))]
    public long[] PrecursorIds { get; set; }

    [Name("MODIFIED_PEPTIDE_IDS")]
    [Optional]
    [TypeConverter(typeof(SemicolonDelimitedToLongArrayConverter))]
    public long[] ModifiedPeptideIds { get; set; }

    [Name("COUNT_PSMS")]
    [Optional]
    public int CountPsms { get; set; }

    [Name("COUNT_PRECURSORS")]
    [Optional]
    public int CountPrecursors { get; set; }

    [Name("COUNT_MODIFIED_PEPTIDES")]
    [Optional]
    public int CountModifiedPeptides { get; set; }

    [Name("QUANTIFICATION")]
    [Optional]
    public double Quantification { get; set; }

    #endregion
}

internal class ChimerysFileSpecificPeptideInfo
{
    public string RawFileName { get; set; }
    public string SampleName { get; set; }
    public double QValue { get; set; }
    public double SearchEngineScore { get; set; }
    public double Pep { get; set; }
    public bool IsIdentifiedByMbr { get; set; }
    public long[] PsmIds { get; set; }
    public long[] PrecursorIds { get; set; }
    public long[] ModifiedPeptideIds { get; set; }
    public int CountPsms { get; set; }
    public int CountPrecursors { get; set; }
    public int CountModifiedPeptides { get; set; }
    public double Quantification { get; set; }
}