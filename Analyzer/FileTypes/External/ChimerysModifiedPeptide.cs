using Analyzer.Util.TypeConverters;
using CsvHelper.Configuration.Attributes;
using Omics.Modifications;
using System.Text;

namespace Analyzer.FileTypes.External;

/// <summary>
/// Represents a Modified Peptide generated by Chimerys (v4.3.0) when ran on the Msaid platform (v1.5.6)
/// </summary>
public class ChimerysModifiedPeptide
{
    [Ignore] public int Charge => 0;
    [Ignore] public string ProteinAccession { get; }

    [Ignore] private string? _fileNameWithoutExtensions;
    [Ignore] public string FileNameWithoutExtension => _fileNameWithoutExtensions ??= Path.GetFileNameWithoutExtension(RawFileName);
    [Ignore] public double ConfidenceMetric => QValue;
    [Ignore] public double SecondaryConfidenceMetric => 1 - Pep;
    [Ignore] public bool PassesConfidenceFilter => QValue <= 0.01;

    [Ignore] private string? _fullSequence;
    [Ignore]
    public string FullSequence
    {
        get
        {
            if (_fullSequence != null)
                return _fullSequence;
            if (!OneBasedModificationDictionary.Any())
                return _fullSequence = BaseSequence;

            var sb = new StringBuilder();

            if (OneBasedModificationDictionary.Any(p => p.Key == 0))
            {
                var mmMod = OneBasedModificationDictionary.FirstOrDefault(p => p.Key == 0).Value;
                if (mmMod is not null)
                {
                    string category = mmMod.ModificationType switch
                    {
                        "Unimod" when mmMod.OriginalId.Contains("Carbamido") => "Common Fixed",
                        "Unimod" when mmMod.OriginalId.Contains("Oxidation") => "Common Variable",
                        "Unimod" when mmMod.OriginalId.Contains("Phosphoryl") => "Common Biological",
                        "Unimod" when mmMod.OriginalId.Contains("Acetyl") => "Common Biological",
                        "Unimod" when mmMod.OriginalId.Contains("Methy") => "Common Biological",
                        _ => mmMod.ModificationType
                    };

                    sb.Append($"[{category}:{mmMod.OriginalId} on {mmMod.Target}]");
                }
            }
            for (int i = 0; i < BaseSequence.Length; i++)
            {
                var residue = BaseSequence[i];
                sb.Append(residue);

                var mmMod = OneBasedModificationDictionary.FirstOrDefault(p => p.Key == i + 1).Value;
                if (mmMod is null) continue;

                string category = mmMod.ModificationType switch
                {
                    "Unimod" when mmMod.OriginalId.Contains("Carbamido") => "Common Fixed",
                    "Unimod" when mmMod.OriginalId.Contains("Oxidation") => "Common Variable",
                    "Unimod" when mmMod.OriginalId.Contains("Phosphoryl") => "Common Biological",
                    "Unimod" when mmMod.OriginalId.Contains("Acetyl") => "Common Biological",
                    "Unimod" when mmMod.OriginalId.Contains("Methy") => "Common Biological",
                    _ => mmMod.ModificationType
                };
                sb.Append($"[{category}:{mmMod.OriginalId} on {mmMod.Target}]");
            }

            return _fullSequence = sb.ToString();

        }
    }


    [Name("MODIFIED_SEQUENCE")]
    [TypeConverter(typeof(ChimerysFullSequenceToModificationConverter))]
    public Dictionary<int, Modification> OneBasedModificationDictionary { get; set; }

    [Name("MODIFIED_PEPTIDE_ID")]
    public long ModifiedPeptideId { get; set; }

    [Name("SEQUENCE")]
    public string BaseSequence { get; set; }

    [Name("MODIFIED_SEQUENCE")]
    public string ModifiedSequence { get; set; }

    [Name("MISSED_CLEAVAGES")]
    public int MissedCleavages { get; set; }

    [Name("MASS")]
    public double MonoisotopicMass { get; set; }

    [Name("LENGTH")]
    public int Length { get; set; }

    [Name("MAX_SPECTRAL_ANGLE")]
    public double MaxSpectralAngle { get; set; }

    [Name("MAX_CTP")]
    public double MaxCtp { get; set; }

    [Name("IS_AMBIGUOUS")]
    public bool IsAmbiguous { get; set; }

    [Name("RAW_FILE_NAME")]
    public string RawFileName { get; set; }

    [Name("SAMPLE_NAME")]
    public string SampleName { get; set; }

    [Name("Q_VALUE")]
    public double QValue { get; set; }

    [Name("SE_SCORE")]
    public double SearchEngineScore { get; set; }

    [Name("PEP")]
    public double Pep { get; set; }

    [Name("GLOBAL_Q_VALUE")]
    public double GlobalQValue { get; set; }

    [Name("GLOBAL_SE_SCORE")]
    public double GlobalSearchEngineScore { get; set; }

    [Name("GLOBAL_PEP")]
    public double GlobalPep { get; set; }

    [Name("DECOY")]
    public bool IsDecoy { get; set; }

    [Name("IS_IDENTIFIED_BY_MBR")]
    public bool IsIdentifiedByMbr { get; set; }

    [Name("PEPTIDE_ID")]
    public int PeptideId { get; set; }

    [Name("PSM_IDS")]
    [TypeConverter(typeof(SemicolonDelimitedToLongArrayConverter))]
    public long[] PsmIds { get; set; }

    [Name("PRECURSOR_IDS")]
    [TypeConverter(typeof(SemicolonDelimitedToLongArrayConverter))]
    public long[] PrecursorIds { get; set; }

    [Name("POSITION_IN_PROTEIN_IDS")]
    [TypeConverter(typeof(SemicolonDelimitedToIntegerArrayConverter))]
    public int[] PositionInProteinIds { get; set; }

    [Name("PROTEIN_IDS")]
    [TypeConverter(typeof(SemicolonDelimitedToLongArrayConverter))]
    public long[] ProteinIds { get; set; }

    [Name("LOCALIZATION_SEQUENCE")]
    public string? LocalizationSequence { get; set; }

    [Name("LOCALIZATION_SCORE")]
    public double? LocalizationScore { get; set; }

    [Name("PROTEIN_SITES")]
    public string? ProteinSites { get; set; } // modified site in protein

    [Name("COUNT_PSMS")]
    public int CountPsms { get; set; }

    [Name("COUNT_PRECURSORS")]
    public int CountPrecursors { get; set; }

    [Name("QUANTIFICATION")]
    public double Quantification { get; set; }
}